{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About the Authors Kyle Dawson Kyle BIO Jeff Imholz Jeff BIO Dave Krier Dave has over 25 years of IT industry experience with deep skills in solution architecture, application development, and infrastructure management. He is an accomplished technical specialist who has traveled around the nation consulting with IBM\u2019s most successful customers.","title":"Home"},{"location":"#about-the-authors","text":"","title":"About the Authors"},{"location":"#kyle-dawson","text":"Kyle BIO","title":"Kyle Dawson"},{"location":"#jeff-imholz","text":"Jeff BIO","title":"Jeff Imholz"},{"location":"#dave-krier","text":"Dave has over 25 years of IT industry experience with deep skills in solution architecture, application development, and infrastructure management. He is an accomplished technical specialist who has traveled around the nation consulting with IBM\u2019s most successful customers.","title":"Dave Krier"},{"location":"cp4d/CP4D_Upgrade/","text":"Outline of steps to upgrade CP4D CP4D 4.6.3 -> 4.6.4 Downlaod the PPT instruction guide here. PowerPoint","title":"CP4D Upgrade Steps"},{"location":"cp4d/CP4D_Upgrade/#outline-of-steps-to-upgrade-cp4d","text":"","title":"Outline of steps to upgrade CP4D"},{"location":"cp4d/CP4D_Upgrade/#cp4d-463-464","text":"Downlaod the PPT instruction guide here. PowerPoint","title":"CP4D 4.6.3 -&gt; 4.6.4"},{"location":"general/mkdocs-setup/","text":"MKDOCS Install & Configuration This site uses MKDocs for the publishing of the \"GitHub Pages\" site You MUST install both MKDocs and the Material Theme. Here is how you setup your machine to edit the documentation hosted on the Github Pages Site. Details of these steps are below. Outline of the steps you will take Install MKdocs Install the MKdocs Theme (Material) Get a Personal Access Token from GitHub Clone this repository Make your changes (Feel free to reach out to Dave Krier or Kyle Dawson for help on how to use MKDocs) Deploy your changes Install MKDocs Here is the installation documentation for MKDocs Install the MKDocs theme Install guidance is on the Material theme page. Material Theme - Quick Start Material Theme Documentation pip3 install mkdocs-material You can check the version of Material you currently have installed with this command. python3 -m pip list If you have any issues with the pip install, you may need to perform an uninstall and reinstall. pip3 uninstall mkdocs-material pip3 install mkdocs-material pip3 uninstall mkdocs pip3 install mkdocs Link to the Material Theme Documentation You need a \"Personal Access Token\" from Github. (This is super simple). Why do I need this? You need this because you need to be able to push changes back into the github repository. Here is a Github doc page you can look at for help if the steps below do not make sense. Login to Github. Click on your user icon in the upper right hand corner Select Settings --> Developer Settings --> Personal Access Tokens Generate a new token with only these prevliages Repo:Status Repo-Deployment Public-Repo Take note of the access key (It's the only time you will see it) !!! important You will use this Access Token as your password when using the gh-deploy mkdocs command. Clone this repo in Github. I assume you will all know how to do that!! MKDocs User Guide - Modifying the site MKDocs Documentation Deploying your changes. Navigate to your cloned repo directory in a terminal window. You must be inside the /daffydoc directory to run the following commands. Build the files using the build command mkdocs build Deploy the newly built files to the Github Pages site !!! note inline end This is where you will use the access token from Github. Use the access token instead of your password. mkdocs gh-deploy","title":"Setup MKDocs"},{"location":"general/mkdocs-setup/#mkdocs-install-configuration","text":"This site uses MKDocs for the publishing of the \"GitHub Pages\" site You MUST install both MKDocs and the Material Theme. Here is how you setup your machine to edit the documentation hosted on the Github Pages Site. Details of these steps are below. Outline of the steps you will take Install MKdocs Install the MKdocs Theme (Material) Get a Personal Access Token from GitHub Clone this repository Make your changes (Feel free to reach out to Dave Krier or Kyle Dawson for help on how to use MKDocs) Deploy your changes","title":"MKDOCS Install &amp; Configuration"},{"location":"general/mkdocs-setup/#install-mkdocs","text":"Here is the installation documentation for MKDocs Install the MKDocs theme Install guidance is on the Material theme page. Material Theme - Quick Start","title":"Install MKDocs"},{"location":"general/mkdocs-setup/#material-theme-documentation","text":"pip3 install mkdocs-material You can check the version of Material you currently have installed with this command. python3 -m pip list If you have any issues with the pip install, you may need to perform an uninstall and reinstall. pip3 uninstall mkdocs-material pip3 install mkdocs-material pip3 uninstall mkdocs pip3 install mkdocs Link to the Material Theme Documentation","title":"Material Theme Documentation"},{"location":"general/mkdocs-setup/#you-need-a-personal-access-token-from-github-this-is-super-simple","text":"Why do I need this? You need this because you need to be able to push changes back into the github repository. Here is a Github doc page you can look at for help if the steps below do not make sense. Login to Github. Click on your user icon in the upper right hand corner Select Settings --> Developer Settings --> Personal Access Tokens Generate a new token with only these prevliages Repo:Status Repo-Deployment Public-Repo Take note of the access key (It's the only time you will see it) !!! important You will use this Access Token as your password when using the gh-deploy mkdocs command.","title":"You need a \"Personal Access Token\" from Github. (This is super simple)."},{"location":"general/mkdocs-setup/#clone-this-repo-in-github","text":"I assume you will all know how to do that!!","title":"Clone this repo in Github."},{"location":"general/mkdocs-setup/#mkdocs-user-guide-modifying-the-site","text":"MKDocs Documentation Deploying your changes. Navigate to your cloned repo directory in a terminal window. You must be inside the /daffydoc directory to run the following commands. Build the files using the build command mkdocs build Deploy the newly built files to the Github Pages site !!! note inline end This is where you will use the access token from Github. Use the access token instead of your password. mkdocs gh-deploy","title":"MKDocs User Guide - Modifying the site"},{"location":"mq/IBMCloud_MQ_Explorer_Connection/","text":"IBM MQ Cloud \u2013 Setup & configuration to run a sample application Download Instructions This is an example to demonstrate the configuration and setup for the IBM MQ Queue Manager and the TLS security requirements to connect. While the sample application in this demonstration is Python, the same steps can be used for any other supported application programming language. Prerequisites IBM MQ Service deployed with a running queue manager ( Instructions ) TLS Channel Security ( Reference Material ) Note: IBM Cloud MQ Service queue manager channels have been pre-configured with TLS. If this is a NEW deployment, you will not need to configure TLS security on the channels. MQ Client must be installed on your local workstation (or the location where you plan to run the client app) For macOS, follow the steps in the ( MQ macOS Toolkit tutorial ). For Windows or Linux MQ clients, download and install one from the ( IBM Support site ). Python (The example application is based on Python). You will need to have Python installed on your machine to run the sample application. Download the TLS Certificate and connection information from your queue manager 1- Log into your IBM Cloud account and navigate to your \u201cIBM MQ Service\u201d. You can find your services in the resource list. 2- Select the queue manager you wish to connect to. 3- Select the Key store tab, to display the certificates associated with your queue manager. 4- Download the certificate by selecting the 3 dots on the certificate and selecting the \u201cDownload public certificate\u201d button. 5- Copy the downloaded PEM file to your project folder, where you will run the application from. 6- Download the connection information for your queue manager by selecting the \u201cConnection Information\u201d button. Note: You can choose the format to download. I selected plain text in my example. 7- Inspect the connection information. We will need the information outlined in red for connection to our queue manager. TASK COMPLETE You now have all the information you need to connect to this queue manager Create application userid/apikey Look here for more detailed information on how to setup userid and api key. ( Instructions ) Our sample will use a pre-defined queue, so the authorization record has been automatically configured. See below instructions on how to configure authorization to a custom queue. Note: If you do not intend to use one of the predefined 'DEV.QUEUE.' queues to put and get messages, follow the ( Assigning user/group access to a queue ) guide to configure the authorization record required for this queue. Below are the steps that I took to create a userid / apikey. 1- On the main IBM MQ Service screen, select \u201cApplication Credentials\u201d 2- Select the \u201cAdd\u201d button to create a NEW set of application credentials 3- Fill out the information and select \u201cAdd and generate API Key\u201d IMPORTANT: You will ONLY see the API KEY ONE TIME!! Take note of this.. !! TASK COMPLETE This will be the Userid & Password used to authenticate to the queue manager. Create the keystore for the client connection For this next step, we need to create a keystore file and add our certificate information to the keystore. 1- Copy the downloaded PEM file (containing the cert) to your project directory. This was downloaded from the IBM Cloud QM Service page in a previous step. 2- Create the keystore with this command below. Note: This command line tool is part of the MQ Developers Kit runmqakm -keydb -create -db <keystorename>.kdb -pw <password> -type pkcs12 -expire 1000 -stash \u2022 keystorename - You can name your keystore any name you wish \u2022 password - You can set the password for the keystore to anything you wish My Example /opt/mqm/bin/runmqakm -keydb -create -db qmgrcert.kdb -pw password -type pkcs12 -expire 1000 -stash 3- Add the PEM (certificate) to the keystore with this command below. Note This command line tool is part of the MQ Developers Kit runmqakm -cert -add -label <yourlabel> -db <keystorename>.kdb -stashed -trust enable -file <pemfilename>.pem \u2022 yourlabel - You can add any label you like here, but I recommend using the same name as your keystorename \u2022 keystorename - This must match the keystore name you created in the first command. \u2022 pemfilename - This must match the name of your pem file (should be in the same directory where your running this command. My Example /opt/mqm/bin/runmqakm -cert -add -label qmgrcertnew1 -db qmgrcertnew1.kdb -stashed -trust enable -file qmgrcert.pem \u2003 4- Verify that you have the generated kdb and sth files You should see two new files that were generated by these 2 commands above. \u2022 keystorname.kdb \u2022 keystorename.sth TASK COMPLETE We will use the keystore files to connect to the queue manager via a channel that is TLS enabled. Test connectivity The Python \u201cpymqi\u201d library requires you to have the MQ Client installed. This python library is a wrapper to the C client libraries loaded with the MQ Client. We MUST have these environment variables set. If you are running these on a linux or Mac machine you can set these variables via the command line using these commands. export DYLD_LIBRARY_PATH=/opt/mqm/lib64 export MQ_INSTALLATION_PATH=/opt/mqm The PATH environment variable should include the mqm libraries. Add these directories to your path. . /opt/mqm/bin:/opt/mqm/lib64:/opt/mqm/samp/bin Below is the sample Python Application. We will need to use the connection information that was downloaded from a previous step to populate the values for the connection. We will also need to reference the keystore file and set the userid / password (api key) import pymqi import logging queue_manager = 'myqm' queue_name = 'DEV.QUEUE.1' message = 'Hello from Python! - This is Dave Krier' cd = pymqi.CD() cd.ChannelName = b'CLOUD.ADMIN.SVRCONN' cd.ConnectionName = b'myqm-4e4a.qm.us-south.mq.appdomain.cloud(30000)' cd.ChannelType = pymqi.CMQC.MQCHT_CLNTCONN cd.TransportType = pymqi.CMQC.MQXPT_TCP cd.SSLCipherSpec = b'ANY_TLS12_OR_HIGHER' sco = pymqi.SCO() sco.KeyRepository = b'./qmgrcert' # include file name but not file extension qmgr = pymqi.QueueManager(None) qmgr.connect_with_options(queue_manager, user='davetest', password='F-5QDP8lO_cI0j7521wEchXxzd2Yv7DeA_gPqa28ASBx', cd=cd, sco=sco) put_queue = pymqi.Queue(qmgr, queue_name) put_queue.put(message) get_queue = pymqi.Queue(qmgr, queue_name) print(get_queue.get()) put_queue.close() get_queue.close() qmgr.disconnect() References https://developer.ibm.com/tutorials/mq-secure-msgs-tls/#step-1-create-tls-objects https://stackoverflow.com/questions/14010551/how-to-convert-between-bytes-and-strings-in-python-3 https://cloud.ibm.com/docs/mqcloud?topic=mqcloud-mqoc_connect_app_qm https://zato.io/pymqi/examples.html https://developer.ibm.com/learningpaths/ibm-mq-badge/","title":"IBM CLoud MQ - TLS MQ Explorer"},{"location":"mq/IBMCloud_MQ_Explorer_Connection/#ibm-mq-cloud-setup-configuration-to-run-a-sample-application","text":"Download Instructions This is an example to demonstrate the configuration and setup for the IBM MQ Queue Manager and the TLS security requirements to connect. While the sample application in this demonstration is Python, the same steps can be used for any other supported application programming language.","title":"IBM MQ Cloud \u2013 Setup &amp; configuration to run a sample application"},{"location":"mq/IBMCloud_MQ_Explorer_Connection/#prerequisites","text":"IBM MQ Service deployed with a running queue manager ( Instructions ) TLS Channel Security ( Reference Material ) Note: IBM Cloud MQ Service queue manager channels have been pre-configured with TLS. If this is a NEW deployment, you will not need to configure TLS security on the channels. MQ Client must be installed on your local workstation (or the location where you plan to run the client app) For macOS, follow the steps in the ( MQ macOS Toolkit tutorial ). For Windows or Linux MQ clients, download and install one from the ( IBM Support site ). Python (The example application is based on Python). You will need to have Python installed on your machine to run the sample application.","title":"Prerequisites"},{"location":"mq/IBMCloud_MQ_Explorer_Connection/#download-the-tls-certificate-and-connection-information-from-your-queue-manager","text":"1- Log into your IBM Cloud account and navigate to your \u201cIBM MQ Service\u201d. You can find your services in the resource list. 2- Select the queue manager you wish to connect to. 3- Select the Key store tab, to display the certificates associated with your queue manager. 4- Download the certificate by selecting the 3 dots on the certificate and selecting the \u201cDownload public certificate\u201d button. 5- Copy the downloaded PEM file to your project folder, where you will run the application from. 6- Download the connection information for your queue manager by selecting the \u201cConnection Information\u201d button. Note: You can choose the format to download. I selected plain text in my example. 7- Inspect the connection information. We will need the information outlined in red for connection to our queue manager. TASK COMPLETE You now have all the information you need to connect to this queue manager","title":"Download the TLS Certificate and connection information from your queue manager"},{"location":"mq/IBMCloud_MQ_Explorer_Connection/#create-application-useridapikey","text":"Look here for more detailed information on how to setup userid and api key. ( Instructions ) Our sample will use a pre-defined queue, so the authorization record has been automatically configured. See below instructions on how to configure authorization to a custom queue. Note: If you do not intend to use one of the predefined 'DEV.QUEUE.' queues to put and get messages, follow the ( Assigning user/group access to a queue ) guide to configure the authorization record required for this queue. Below are the steps that I took to create a userid / apikey. 1- On the main IBM MQ Service screen, select \u201cApplication Credentials\u201d 2- Select the \u201cAdd\u201d button to create a NEW set of application credentials 3- Fill out the information and select \u201cAdd and generate API Key\u201d IMPORTANT: You will ONLY see the API KEY ONE TIME!! Take note of this.. !! TASK COMPLETE This will be the Userid & Password used to authenticate to the queue manager.","title":"Create application userid/apikey"},{"location":"mq/IBMCloud_MQ_Explorer_Connection/#create-the-keystore-for-the-client-connection","text":"For this next step, we need to create a keystore file and add our certificate information to the keystore. 1- Copy the downloaded PEM file (containing the cert) to your project directory. This was downloaded from the IBM Cloud QM Service page in a previous step. 2- Create the keystore with this command below. Note: This command line tool is part of the MQ Developers Kit runmqakm -keydb -create -db <keystorename>.kdb -pw <password> -type pkcs12 -expire 1000 -stash \u2022 keystorename - You can name your keystore any name you wish \u2022 password - You can set the password for the keystore to anything you wish My Example /opt/mqm/bin/runmqakm -keydb -create -db qmgrcert.kdb -pw password -type pkcs12 -expire 1000 -stash 3- Add the PEM (certificate) to the keystore with this command below. Note This command line tool is part of the MQ Developers Kit runmqakm -cert -add -label <yourlabel> -db <keystorename>.kdb -stashed -trust enable -file <pemfilename>.pem \u2022 yourlabel - You can add any label you like here, but I recommend using the same name as your keystorename \u2022 keystorename - This must match the keystore name you created in the first command. \u2022 pemfilename - This must match the name of your pem file (should be in the same directory where your running this command. My Example /opt/mqm/bin/runmqakm -cert -add -label qmgrcertnew1 -db qmgrcertnew1.kdb -stashed -trust enable -file qmgrcert.pem \u2003 4- Verify that you have the generated kdb and sth files You should see two new files that were generated by these 2 commands above. \u2022 keystorname.kdb \u2022 keystorename.sth TASK COMPLETE We will use the keystore files to connect to the queue manager via a channel that is TLS enabled.","title":"Create the keystore for the client connection"},{"location":"mq/IBMCloud_MQ_Explorer_Connection/#test-connectivity","text":"The Python \u201cpymqi\u201d library requires you to have the MQ Client installed. This python library is a wrapper to the C client libraries loaded with the MQ Client. We MUST have these environment variables set. If you are running these on a linux or Mac machine you can set these variables via the command line using these commands. export DYLD_LIBRARY_PATH=/opt/mqm/lib64 export MQ_INSTALLATION_PATH=/opt/mqm The PATH environment variable should include the mqm libraries. Add these directories to your path. . /opt/mqm/bin:/opt/mqm/lib64:/opt/mqm/samp/bin Below is the sample Python Application. We will need to use the connection information that was downloaded from a previous step to populate the values for the connection. We will also need to reference the keystore file and set the userid / password (api key) import pymqi import logging queue_manager = 'myqm' queue_name = 'DEV.QUEUE.1' message = 'Hello from Python! - This is Dave Krier' cd = pymqi.CD() cd.ChannelName = b'CLOUD.ADMIN.SVRCONN' cd.ConnectionName = b'myqm-4e4a.qm.us-south.mq.appdomain.cloud(30000)' cd.ChannelType = pymqi.CMQC.MQCHT_CLNTCONN cd.TransportType = pymqi.CMQC.MQXPT_TCP cd.SSLCipherSpec = b'ANY_TLS12_OR_HIGHER' sco = pymqi.SCO() sco.KeyRepository = b'./qmgrcert' # include file name but not file extension qmgr = pymqi.QueueManager(None) qmgr.connect_with_options(queue_manager, user='davetest', password='F-5QDP8lO_cI0j7521wEchXxzd2Yv7DeA_gPqa28ASBx', cd=cd, sco=sco) put_queue = pymqi.Queue(qmgr, queue_name) put_queue.put(message) get_queue = pymqi.Queue(qmgr, queue_name) print(get_queue.get()) put_queue.close() get_queue.close() qmgr.disconnect()","title":"Test connectivity"},{"location":"mq/IBMCloud_MQ_Explorer_Connection/#references","text":"https://developer.ibm.com/tutorials/mq-secure-msgs-tls/#step-1-create-tls-objects https://stackoverflow.com/questions/14010551/how-to-convert-between-bytes-and-strings-in-python-3 https://cloud.ibm.com/docs/mqcloud?topic=mqcloud-mqoc_connect_app_qm https://zato.io/pymqi/examples.html https://developer.ibm.com/learningpaths/ibm-mq-badge/","title":"References"},{"location":"mq/IBMCloud_MQ_Python_TLS/","text":"IBM MQ Cloud \u2013 Setup & configuration to run a sample application Download Instructions This is an example to demonstrate the configuration and setup for the IBM MQ Queue Manager and the TLS security requirements to connect. While the sample application in this demonstration is Python, the same steps can be used for any other supported application programming language. Prerequisites IBM MQ Service deployed with a running queue manager ( Instructions ) TLS Channel Security ( Reference Material ) Note: IBM Cloud MQ Service queue manager channels have been pre-configured with TLS. If this is a NEW deployment, you will not need to configure TLS security on the channels. MQ Client must be installed on your local workstation (or the location where you plan to run the client app) For macOS, follow the steps in the ( MQ macOS Toolkit tutorial ). For Windows or Linux MQ clients, download and install one from the ( IBM Support site ). Python (The example application is based on Python). You will need to have Python installed on your machine to run the sample application. Download the TLS Certificate and connection information from your queue manager 1- Log into your IBM Cloud account and navigate to your \u201cIBM MQ Service\u201d. You can find your services in the resource list. 2- Select the queue manager you wish to connect to. 3- Select the Key store tab, to display the certificates associated with your queue manager. 4- Download the certificate by selecting the 3 dots on the certificate and selecting the \u201cDownload public certificate\u201d button. 5- Copy the downloaded PEM file to your project folder, where you will run the application from. 6- Download the connection information for your queue manager by selecting the \u201cConnection Information\u201d button. Note: You can choose the format to download. I selected plain text in my example. 7- Inspect the connection information. We will need the information outlined in red for connection to our queue manager. TASK COMPLETE You now have all the information you need to connect to this queue manager Create application userid/apikey Look here for more detailed information on how to setup userid and api key. ( Instructions ) Our sample will use a pre-defined queue, so the authorization record has been automatically configured. See below instructions on how to configure authorization to a custom queue. Note: If you do not intend to use one of the predefined 'DEV.QUEUE.' queues to put and get messages, follow the ( Assigning user/group access to a queue ) guide to configure the authorization record required for this queue. Below are the steps that I took to create a userid / apikey. 1- On the main IBM MQ Service screen, select \u201cApplication Credentials\u201d 2- Select the \u201cAdd\u201d button to create a NEW set of application credentials 3- Fill out the information and select \u201cAdd and generate API Key\u201d IMPORTANT: You will ONLY see the API KEY ONE TIME!! Take note of this.. !! TASK COMPLETE This will be the Userid & Password used to authenticate to the queue manager. Create the keystore for the client connection For this next step, we need to create a keystore file and add our certificate information to the keystore. 1- Copy the downloaded PEM file (containing the cert) to your project directory. This was downloaded from the IBM Cloud QM Service page in a previous step. 2- Create the keystore with this command below. Note: This command line tool is part of the MQ Developers Kit runmqakm -keydb -create -db <keystorename>.kdb -pw <password> -type pkcs12 -expire 1000 -stash \u2022 keystorename - You can name your keystore any name you wish \u2022 password - You can set the password for the keystore to anything you wish My Example /opt/mqm/bin/runmqakm -keydb -create -db qmgrcert.kdb -pw password -type pkcs12 -expire 1000 -stash 3- Add the PEM (certificate) to the keystore with this command below. Note This command line tool is part of the MQ Developers Kit runmqakm -cert -add -label <yourlabel> -db <keystorename>.kdb -stashed -trust enable -file <pemfilename>.pem \u2022 yourlabel - You can add any label you like here, but I recommend using the same name as your keystorename \u2022 keystorename - This must match the keystore name you created in the first command. \u2022 pemfilename - This must match the name of your pem file (should be in the same directory where your running this command. My Example /opt/mqm/bin/runmqakm -cert -add -label qmgrcertnew1 -db qmgrcertnew1.kdb -stashed -trust enable -file qmgrcert.pem \u2003 4- Verify that you have the generated kdb and sth files You should see two new files that were generated by these 2 commands above. \u2022 keystorname.kdb \u2022 keystorename.sth TASK COMPLETE We will use the keystore files to connect to the queue manager via a channel that is TLS enabled. Test connectivity The Python \u201cpymqi\u201d library requires you to have the MQ Client installed. This python library is a wrapper to the C client libraries loaded with the MQ Client. We MUST have these environment variables set. If you are running these on a linux or Mac machine you can set these variables via the command line using these commands. export DYLD_LIBRARY_PATH=/opt/mqm/lib64 export MQ_INSTALLATION_PATH=/opt/mqm The PATH environment variable should include the mqm libraries. Add these directories to your path. . /opt/mqm/bin:/opt/mqm/lib64:/opt/mqm/samp/bin Below is the sample Python Application. We will need to use the connection information that was downloaded from a previous step to populate the values for the connection. We will also need to reference the keystore file and set the userid / password (api key) import pymqi import logging queue_manager = 'myqm' queue_name = 'DEV.QUEUE.1' message = 'Hello from Python! - This is Dave Krier' cd = pymqi.CD() cd.ChannelName = b'CLOUD.ADMIN.SVRCONN' cd.ConnectionName = b'myqm-4e4a.qm.us-south.mq.appdomain.cloud(30000)' cd.ChannelType = pymqi.CMQC.MQCHT_CLNTCONN cd.TransportType = pymqi.CMQC.MQXPT_TCP cd.SSLCipherSpec = b'ANY_TLS12_OR_HIGHER' sco = pymqi.SCO() sco.KeyRepository = b'./qmgrcert' # include file name but not file extension qmgr = pymqi.QueueManager(None) qmgr.connect_with_options(queue_manager, user='davetest', password='F-5QDP8lO_cI0j7521wEchXxzd2Yv7DeA_gPqa28ASBx', cd=cd, sco=sco) put_queue = pymqi.Queue(qmgr, queue_name) put_queue.put(message) get_queue = pymqi.Queue(qmgr, queue_name) print(get_queue.get()) put_queue.close() get_queue.close() qmgr.disconnect() References https://developer.ibm.com/tutorials/mq-secure-msgs-tls/#step-1-create-tls-objects https://stackoverflow.com/questions/14010551/how-to-convert-between-bytes-and-strings-in-python-3 https://cloud.ibm.com/docs/mqcloud?topic=mqcloud-mqoc_connect_app_qm https://zato.io/pymqi/examples.html https://developer.ibm.com/learningpaths/ibm-mq-badge/","title":"IBM CLoud MQ - TLS Python"},{"location":"mq/IBMCloud_MQ_Python_TLS/#ibm-mq-cloud-setup-configuration-to-run-a-sample-application","text":"Download Instructions This is an example to demonstrate the configuration and setup for the IBM MQ Queue Manager and the TLS security requirements to connect. While the sample application in this demonstration is Python, the same steps can be used for any other supported application programming language.","title":"IBM MQ Cloud \u2013 Setup &amp; configuration to run a sample application"},{"location":"mq/IBMCloud_MQ_Python_TLS/#prerequisites","text":"IBM MQ Service deployed with a running queue manager ( Instructions ) TLS Channel Security ( Reference Material ) Note: IBM Cloud MQ Service queue manager channels have been pre-configured with TLS. If this is a NEW deployment, you will not need to configure TLS security on the channels. MQ Client must be installed on your local workstation (or the location where you plan to run the client app) For macOS, follow the steps in the ( MQ macOS Toolkit tutorial ). For Windows or Linux MQ clients, download and install one from the ( IBM Support site ). Python (The example application is based on Python). You will need to have Python installed on your machine to run the sample application.","title":"Prerequisites"},{"location":"mq/IBMCloud_MQ_Python_TLS/#download-the-tls-certificate-and-connection-information-from-your-queue-manager","text":"1- Log into your IBM Cloud account and navigate to your \u201cIBM MQ Service\u201d. You can find your services in the resource list. 2- Select the queue manager you wish to connect to. 3- Select the Key store tab, to display the certificates associated with your queue manager. 4- Download the certificate by selecting the 3 dots on the certificate and selecting the \u201cDownload public certificate\u201d button. 5- Copy the downloaded PEM file to your project folder, where you will run the application from. 6- Download the connection information for your queue manager by selecting the \u201cConnection Information\u201d button. Note: You can choose the format to download. I selected plain text in my example. 7- Inspect the connection information. We will need the information outlined in red for connection to our queue manager. TASK COMPLETE You now have all the information you need to connect to this queue manager","title":"Download the TLS Certificate and connection information from your queue manager"},{"location":"mq/IBMCloud_MQ_Python_TLS/#create-application-useridapikey","text":"Look here for more detailed information on how to setup userid and api key. ( Instructions ) Our sample will use a pre-defined queue, so the authorization record has been automatically configured. See below instructions on how to configure authorization to a custom queue. Note: If you do not intend to use one of the predefined 'DEV.QUEUE.' queues to put and get messages, follow the ( Assigning user/group access to a queue ) guide to configure the authorization record required for this queue. Below are the steps that I took to create a userid / apikey. 1- On the main IBM MQ Service screen, select \u201cApplication Credentials\u201d 2- Select the \u201cAdd\u201d button to create a NEW set of application credentials 3- Fill out the information and select \u201cAdd and generate API Key\u201d IMPORTANT: You will ONLY see the API KEY ONE TIME!! Take note of this.. !! TASK COMPLETE This will be the Userid & Password used to authenticate to the queue manager.","title":"Create application userid/apikey"},{"location":"mq/IBMCloud_MQ_Python_TLS/#create-the-keystore-for-the-client-connection","text":"For this next step, we need to create a keystore file and add our certificate information to the keystore. 1- Copy the downloaded PEM file (containing the cert) to your project directory. This was downloaded from the IBM Cloud QM Service page in a previous step. 2- Create the keystore with this command below. Note: This command line tool is part of the MQ Developers Kit runmqakm -keydb -create -db <keystorename>.kdb -pw <password> -type pkcs12 -expire 1000 -stash \u2022 keystorename - You can name your keystore any name you wish \u2022 password - You can set the password for the keystore to anything you wish My Example /opt/mqm/bin/runmqakm -keydb -create -db qmgrcert.kdb -pw password -type pkcs12 -expire 1000 -stash 3- Add the PEM (certificate) to the keystore with this command below. Note This command line tool is part of the MQ Developers Kit runmqakm -cert -add -label <yourlabel> -db <keystorename>.kdb -stashed -trust enable -file <pemfilename>.pem \u2022 yourlabel - You can add any label you like here, but I recommend using the same name as your keystorename \u2022 keystorename - This must match the keystore name you created in the first command. \u2022 pemfilename - This must match the name of your pem file (should be in the same directory where your running this command. My Example /opt/mqm/bin/runmqakm -cert -add -label qmgrcertnew1 -db qmgrcertnew1.kdb -stashed -trust enable -file qmgrcert.pem \u2003 4- Verify that you have the generated kdb and sth files You should see two new files that were generated by these 2 commands above. \u2022 keystorname.kdb \u2022 keystorename.sth TASK COMPLETE We will use the keystore files to connect to the queue manager via a channel that is TLS enabled.","title":"Create the keystore for the client connection"},{"location":"mq/IBMCloud_MQ_Python_TLS/#test-connectivity","text":"The Python \u201cpymqi\u201d library requires you to have the MQ Client installed. This python library is a wrapper to the C client libraries loaded with the MQ Client. We MUST have these environment variables set. If you are running these on a linux or Mac machine you can set these variables via the command line using these commands. export DYLD_LIBRARY_PATH=/opt/mqm/lib64 export MQ_INSTALLATION_PATH=/opt/mqm The PATH environment variable should include the mqm libraries. Add these directories to your path. . /opt/mqm/bin:/opt/mqm/lib64:/opt/mqm/samp/bin Below is the sample Python Application. We will need to use the connection information that was downloaded from a previous step to populate the values for the connection. We will also need to reference the keystore file and set the userid / password (api key) import pymqi import logging queue_manager = 'myqm' queue_name = 'DEV.QUEUE.1' message = 'Hello from Python! - This is Dave Krier' cd = pymqi.CD() cd.ChannelName = b'CLOUD.ADMIN.SVRCONN' cd.ConnectionName = b'myqm-4e4a.qm.us-south.mq.appdomain.cloud(30000)' cd.ChannelType = pymqi.CMQC.MQCHT_CLNTCONN cd.TransportType = pymqi.CMQC.MQXPT_TCP cd.SSLCipherSpec = b'ANY_TLS12_OR_HIGHER' sco = pymqi.SCO() sco.KeyRepository = b'./qmgrcert' # include file name but not file extension qmgr = pymqi.QueueManager(None) qmgr.connect_with_options(queue_manager, user='davetest', password='F-5QDP8lO_cI0j7521wEchXxzd2Yv7DeA_gPqa28ASBx', cd=cd, sco=sco) put_queue = pymqi.Queue(qmgr, queue_name) put_queue.put(message) get_queue = pymqi.Queue(qmgr, queue_name) print(get_queue.get()) put_queue.close() get_queue.close() qmgr.disconnect()","title":"Test connectivity"},{"location":"mq/IBMCloud_MQ_Python_TLS/#references","text":"https://developer.ibm.com/tutorials/mq-secure-msgs-tls/#step-1-create-tls-objects https://stackoverflow.com/questions/14010551/how-to-convert-between-bytes-and-strings-in-python-3 https://cloud.ibm.com/docs/mqcloud?topic=mqcloud-mqoc_connect_app_qm https://zato.io/pymqi/examples.html https://developer.ibm.com/learningpaths/ibm-mq-badge/","title":"References"},{"location":"mq/IBMCloud_MQ_dotNet_Core_Managed/","text":"IBM MQ Cloud \u2013 Setup & configuration to run a sample application Download Instructions This is an example to demonstrate the configuration and setup for the IBM MQ Queue Manager and the TLS security requirements to connect using a .NET Core MANAGED client. Specifications IBM MQ Service on IBM Cloud V 9.3.3.2 IBM MQ dotNet Client V 9.3.3.1 Windows Client Machine (I used Windows 2022 Server for my testing) Prerequisites \u2022 Deploy IBM MQ Service in IBM Cloud. (The lite service will work) \u2022 Deploy a Queue Manager within your Cloud MQ service \u2022 Windows Client Machine o Install openssl o Install Visual Studio Developer Edition o Install IBM MQ Client V9.3.3.1 IBM MQ Service deployed with a running queue manager ( Instructions ) TLS Channel Security ( Reference Material ) Note: IBM Cloud MQ Service queue manager channels have been pre-configured with TLS. If this is a NEW deployment, you will not need to configure TLS security on the channels. MQ Client must be installed on your local workstation (or the location where you plan to run the client app) For Windows or Linux MQ clients, download and install one from the ( IBM Support site ). Windows Client Machine Install openssl Install Visual Studio Developer Edition Install IBM MQ Client V9.3.3.1 Enable SSL on your Windows Client You MUST have SSL policy enabled on your client machine. To ensure that you have this setup please run gpedit.exe and verify. If the above setting is not enabled, you will need to enable this. NOTE : You can leave the default cipher Suites order field to the default setting. We just need to make sure that we are using one of the values in this filed when we make a connection with the client application. Create SSL Cert / Key You will need to create a ssl cert and key using the below command. To do this you need to have openssl installed in your machine. Example Command openssl req -newkey rsa:2048 -nodes -keyout krierclientKey.pem -x509 -days 365 -out krierclientCert.pem Below is an example of the settings I used. The only thing that is important to note on this is the FQDN name. You need to set this to the fully qualified domain name (host name) of your MQ Server. You can find this information in the connection information for your queue manager in the cloud. Combine the Cert / Key into a single PEM file Combine the private key and public certificate into a single file cat krierclientKey.pem > Krier.pem cat krierclientCert.pem >> Krier.pem Note: if you are doing this on a windows machine, you can use a text editor to create a new file and paste the contents of the two PEM files into a NEW PEM file. Create the pfx (pk12) file for the Windows Cert Store openssl pkcs12 -export -out krier.pfx -in krier.pem Note: We will use this new singe PEM file with both the key and the cert on the IBM Public Cloud Queue Manager. Import the pfx file into BOTH personal key store and Windows Trust Store On your Windows client, you will need to run the MMC to modify the certificates for windows. From the run menu, type mmc and hit enter. Open this app below. From the file menu, select Add Remove Snap In and select the Certificates from the left hand menu option. Add that to the snap in and select OK. In our example, we will be using the Local Computer (*SYSTEM) keystore repository. We need to add our pfx file to BOTH the personal repository and the trusted repository. Right click on the Personal/Certificates folder and select the option to import Select the pfx file we created in the previous step.. You should now see that in your personal key store. Modify the label (friendly name of the cert you just imported) Right click on the cert in your keystore. Select properties. This is VERY IMPORTANT .. Give your cert a friendly name in this format. ibmwebspheremq + <The USERID of your Windows User who will be running the Application> Note: I am logged in with the administrator userid, so that\u2019s what I used in my example below. IMPORTANT. . You need to perform the same steps to import the pfx file into the Trusted Root Certification Authorities keystore ** Import the PEM into the keystroke for the QM on the cloud. Log into your queue manager on the IBM Cloud. Select the Key Store tab from the management console Select IMPORT Browse to locate your PEM file. This will be the PEM file with your cert & key.. In my example it\u2019s the krier.pem file. Give your cert a name (Lable). This is important to label it correctly. . You need to label it as follows. ibmwebspheremq + Now we need to ensure that the cert is used for our channels. Select the 3 dots for the qert to see the management button. Select to use this cert for the channels you are connecting to. In our case it\u2019s both of these channels below. Create an USERID that will be used for channel authentication. On the initial page for your IBM Cloud MQ Service, you will have the option to create a new application credential. Create an application credential. Take note of your APIKEY, that will be your password when connecting. Modify the SSL of the QM qm.ini Queue Manager configuration. Next we need to make a few updates to our queue manager settings. Log into the MQ Console Select manage on the left hand side to bring up the management console. Select the \u201cview configuration\u201d link in the upper right hand corner. Edit the SSL settings. Remove the cert label value and save your settings. It should be blank. Refresh TLS Security At the top of the configuration page you will see a ACTION button. Select the button and refresh the TLS settings Get your connection information for your queue manager We will need this information for our application. Running a Sample Client .NET App I am using Visual Studio code to test my applications. You need to use the IBM MQ .Net client library to connect. You have 2 options to setup your project to use the MQ Client libraries. Option 1. Add a reference to the amdmdnetstd.dll from the installed windows mq client. After you add this reference you should see it in your project as displayed below. The advantage of this option is that you can run MQ Client Tracing, to help you debug. Option 2. You can use nuGet from Visual Studio IDE to add the IBM MQ Client to your project. Search for packages from IBM and you will find the IBMMQDotnetClient package. Sample code using IBM.WMQ; using System; using System.Collections; using System.Text; namespace myqmgrclient { internal class Program { static void Main(string[] args) { string strQueueManagerName = \"myqmgr\"; string strChannelName = \"CLOUD.APP.SVRCONN\"; string strQueueName = \"DEV.QUEUE.1\"; string strServerName = \"myqmgr-4e4a.qm.us-south.mq.appdomain.cloud\"; int intPort = 30762; string strMsg = \"Hello IBM, this is a message\"; Hashtable queueProperties = new Hashtable { { MQC.HOST_NAME_PROPERTY, strServerName }, { MQC.CHANNEL_PROPERTY, strChannelName }, { MQC.PORT_PROPERTY, intPort }, { MQC.CONNECT_OPTIONS_PROPERTY, MQC.MQCNO_RECONNECT }, { MQC.TRANSPORT_PROPERTY, MQC.TRANSPORT_MQSERIES_MANAGED }, { MQC.SSL_CERT_STORE_PROPERTY, \"*SYSTEM\" }, { MQC.SSL_CIPHER_SPEC_PROPERTY, \"TLS_RSA_WITH_AES_128_CBC_SHA256\" } }; //Set Username MQEnvironment.UserId = \"davetest\"; //Set Passowrd MQEnvironment.Password = \"F-5QDP8lO_cI0j7521wEchXxzd2Yv7DeA_gPtttqa28ASBV\"; //Define a Queue Manager try { Console.WriteLine(Environment.UserName.ToLower()); Console.WriteLine(MQEnvironment.CertificateLabel); MQQueueManager myQM = new MQQueueManager(strQueueManagerName, queueProperties); // creating a message object MQMessage queueMessage = new MQMessage(); queueMessage.WriteString(\"test message\"); //Define a Queue var queue = myQM.AccessQueue (strQueueName, MQC.MQOO_OUTPUT + MQC.MQOO_FAIL_IF_QUIESCING); MQPutMessageOptions queuePutMessageOptions = new MQPutMessageOptions(); queue.Put(queueMessage, queuePutMessageOptions); queue.Close(); Console.WriteLine(\"Success\"); } catch (Exception ex) { Console.WriteLine(ex); Console.WriteLine(ex.Message); } Console.ReadLine(); } } } Note: There are more samples provided with the MQ Client. Location: C:\\Program Files\\IBM\\MQ\\tools\\dotnet\\samples\\ Debugging \u2013 Connectivity Issues.. On the Client Application I would highly recommend you turn on MQ Tracing for your windows client. IMPORTANT: This requires you to reference the IBM MQ Client DLL from the installed MQ Client on your local windows machine. You will need to set 3 environment variables for your application. Select the debug menu and then select debug properties to show this window below. Set the environment variables. NOTE: You need to close down Visual Studio and reopen it to get the variables to be picked up by the editor. On the MQ Server. You can see any connection errors in the logs on the server. Below is a screen shot of the logs. References Connecting to IBM MQ with SSL Article How to import intermediate and root certificates via MMC Troubleshooting MQ SSL Sample code repository Download \u2013 Sample instructions for SSL Python SSL Unmanaged .Net Framework Sample How To MQ Documentation \u2013 Configure TLS for Managed .NET App Cyper Spec for MQ Information Key Repository\u2019s for Managed .Net Applications Running .Net Core application on Linux How to perform common IBM Management Cert Tasks IBM MQ in Kubernetes \u2013 Enabling TLS with signed CA Generating PK12 Certs Creating self signed Certs for use with IBM MQ on Cloud Stack Overflow \u2013 2393 Error - Resolution Stack Overflow \u2013 MQ TLS Error Resolution with Tracing How to create a PEM file Documentation \u2013 Understanding the Certificate Label Requirements How to create a pfx file from cert and private key","title":"IBM CLoud MQ - TLS dotNet Core"},{"location":"mq/IBMCloud_MQ_dotNet_Core_Managed/#ibm-mq-cloud-setup-configuration-to-run-a-sample-application","text":"Download Instructions This is an example to demonstrate the configuration and setup for the IBM MQ Queue Manager and the TLS security requirements to connect using a .NET Core MANAGED client.","title":"IBM MQ Cloud \u2013 Setup &amp; configuration to run a sample application"},{"location":"mq/IBMCloud_MQ_dotNet_Core_Managed/#specifications","text":"IBM MQ Service on IBM Cloud V 9.3.3.2 IBM MQ dotNet Client V 9.3.3.1 Windows Client Machine (I used Windows 2022 Server for my testing)","title":"Specifications"},{"location":"mq/IBMCloud_MQ_dotNet_Core_Managed/#prerequisites","text":"\u2022 Deploy IBM MQ Service in IBM Cloud. (The lite service will work) \u2022 Deploy a Queue Manager within your Cloud MQ service \u2022 Windows Client Machine o Install openssl o Install Visual Studio Developer Edition o Install IBM MQ Client V9.3.3.1 IBM MQ Service deployed with a running queue manager ( Instructions ) TLS Channel Security ( Reference Material ) Note: IBM Cloud MQ Service queue manager channels have been pre-configured with TLS. If this is a NEW deployment, you will not need to configure TLS security on the channels. MQ Client must be installed on your local workstation (or the location where you plan to run the client app) For Windows or Linux MQ clients, download and install one from the ( IBM Support site ). Windows Client Machine Install openssl Install Visual Studio Developer Edition Install IBM MQ Client V9.3.3.1","title":"Prerequisites"},{"location":"mq/IBMCloud_MQ_dotNet_Core_Managed/#enable-ssl-on-your-windows-client","text":"You MUST have SSL policy enabled on your client machine. To ensure that you have this setup please run gpedit.exe and verify. If the above setting is not enabled, you will need to enable this. NOTE : You can leave the default cipher Suites order field to the default setting. We just need to make sure that we are using one of the values in this filed when we make a connection with the client application.","title":"Enable SSL on your Windows Client"},{"location":"mq/IBMCloud_MQ_dotNet_Core_Managed/#create-ssl-cert-key","text":"You will need to create a ssl cert and key using the below command. To do this you need to have openssl installed in your machine. Example Command openssl req -newkey rsa:2048 -nodes -keyout krierclientKey.pem -x509 -days 365 -out krierclientCert.pem Below is an example of the settings I used. The only thing that is important to note on this is the FQDN name. You need to set this to the fully qualified domain name (host name) of your MQ Server. You can find this information in the connection information for your queue manager in the cloud.","title":"Create SSL Cert / Key"},{"location":"mq/IBMCloud_MQ_dotNet_Core_Managed/#combine-the-cert-key-into-a-single-pem-file","text":"Combine the private key and public certificate into a single file cat krierclientKey.pem > Krier.pem cat krierclientCert.pem >> Krier.pem Note: if you are doing this on a windows machine, you can use a text editor to create a new file and paste the contents of the two PEM files into a NEW PEM file.","title":"Combine the Cert / Key into a single PEM file"},{"location":"mq/IBMCloud_MQ_dotNet_Core_Managed/#create-the-pfx-pk12-file-for-the-windows-cert-store","text":"openssl pkcs12 -export -out krier.pfx -in krier.pem Note: We will use this new singe PEM file with both the key and the cert on the IBM Public Cloud Queue Manager.","title":"Create the pfx (pk12) file for the Windows Cert Store"},{"location":"mq/IBMCloud_MQ_dotNet_Core_Managed/#import-the-pfx-file-into-both-personal-key-store-and-windows-trust-store","text":"On your Windows client, you will need to run the MMC to modify the certificates for windows. From the run menu, type mmc and hit enter. Open this app below. From the file menu, select Add Remove Snap In and select the Certificates from the left hand menu option. Add that to the snap in and select OK. In our example, we will be using the Local Computer (*SYSTEM) keystore repository. We need to add our pfx file to BOTH the personal repository and the trusted repository. Right click on the Personal/Certificates folder and select the option to import Select the pfx file we created in the previous step.. You should now see that in your personal key store. Modify the label (friendly name of the cert you just imported) Right click on the cert in your keystore. Select properties. This is VERY IMPORTANT .. Give your cert a friendly name in this format. ibmwebspheremq + <The USERID of your Windows User who will be running the Application> Note: I am logged in with the administrator userid, so that\u2019s what I used in my example below. IMPORTANT. . You need to perform the same steps to import the pfx file into the Trusted Root Certification Authorities keystore **","title":"Import the pfx file into BOTH personal key store and Windows Trust Store"},{"location":"mq/IBMCloud_MQ_dotNet_Core_Managed/#import-the-pem-into-the-keystroke-for-the-qm-on-the-cloud","text":"Log into your queue manager on the IBM Cloud. Select the Key Store tab from the management console Select IMPORT Browse to locate your PEM file. This will be the PEM file with your cert & key.. In my example it\u2019s the krier.pem file. Give your cert a name (Lable). This is important to label it correctly. . You need to label it as follows. ibmwebspheremq + Now we need to ensure that the cert is used for our channels. Select the 3 dots for the qert to see the management button. Select to use this cert for the channels you are connecting to. In our case it\u2019s both of these channels below.","title":"Import the PEM into the keystroke for the QM on the cloud."},{"location":"mq/IBMCloud_MQ_dotNet_Core_Managed/#create-an-userid-that-will-be-used-for-channel-authentication","text":"On the initial page for your IBM Cloud MQ Service, you will have the option to create a new application credential. Create an application credential. Take note of your APIKEY, that will be your password when connecting.","title":"Create an USERID that will be used for channel authentication."},{"location":"mq/IBMCloud_MQ_dotNet_Core_Managed/#modify-the-ssl-of-the-qm-qmini-queue-manager-configuration","text":"Next we need to make a few updates to our queue manager settings. Log into the MQ Console Select manage on the left hand side to bring up the management console. Select the \u201cview configuration\u201d link in the upper right hand corner. Edit the SSL settings. Remove the cert label value and save your settings. It should be blank.","title":"Modify the SSL of the QM qm.ini  Queue Manager configuration."},{"location":"mq/IBMCloud_MQ_dotNet_Core_Managed/#refresh-tls-security","text":"At the top of the configuration page you will see a ACTION button. Select the button and refresh the TLS settings","title":"Refresh TLS Security"},{"location":"mq/IBMCloud_MQ_dotNet_Core_Managed/#get-your-connection-information-for-your-queue-manager","text":"We will need this information for our application. Running a Sample Client .NET App I am using Visual Studio code to test my applications. You need to use the IBM MQ .Net client library to connect. You have 2 options to setup your project to use the MQ Client libraries.","title":"Get your connection information for your queue manager"},{"location":"mq/IBMCloud_MQ_dotNet_Core_Managed/#option-1-add-a-reference-to-the-amdmdnetstddll-from-the-installed-windows-mq-client","text":"After you add this reference you should see it in your project as displayed below. The advantage of this option is that you can run MQ Client Tracing, to help you debug.","title":"Option 1. Add a reference to the amdmdnetstd.dll from the installed windows mq client."},{"location":"mq/IBMCloud_MQ_dotNet_Core_Managed/#option-2-you-can-use-nuget-from-visual-studio-ide-to-add-the-ibm-mq-client-to-your-project","text":"Search for packages from IBM and you will find the IBMMQDotnetClient package.","title":"Option 2.  You can use nuGet from Visual Studio IDE to add the IBM MQ Client to your project."},{"location":"mq/IBMCloud_MQ_dotNet_Core_Managed/#sample-code","text":"using IBM.WMQ; using System; using System.Collections; using System.Text; namespace myqmgrclient { internal class Program { static void Main(string[] args) { string strQueueManagerName = \"myqmgr\"; string strChannelName = \"CLOUD.APP.SVRCONN\"; string strQueueName = \"DEV.QUEUE.1\"; string strServerName = \"myqmgr-4e4a.qm.us-south.mq.appdomain.cloud\"; int intPort = 30762; string strMsg = \"Hello IBM, this is a message\"; Hashtable queueProperties = new Hashtable { { MQC.HOST_NAME_PROPERTY, strServerName }, { MQC.CHANNEL_PROPERTY, strChannelName }, { MQC.PORT_PROPERTY, intPort }, { MQC.CONNECT_OPTIONS_PROPERTY, MQC.MQCNO_RECONNECT }, { MQC.TRANSPORT_PROPERTY, MQC.TRANSPORT_MQSERIES_MANAGED }, { MQC.SSL_CERT_STORE_PROPERTY, \"*SYSTEM\" }, { MQC.SSL_CIPHER_SPEC_PROPERTY, \"TLS_RSA_WITH_AES_128_CBC_SHA256\" } }; //Set Username MQEnvironment.UserId = \"davetest\"; //Set Passowrd MQEnvironment.Password = \"F-5QDP8lO_cI0j7521wEchXxzd2Yv7DeA_gPtttqa28ASBV\"; //Define a Queue Manager try { Console.WriteLine(Environment.UserName.ToLower()); Console.WriteLine(MQEnvironment.CertificateLabel); MQQueueManager myQM = new MQQueueManager(strQueueManagerName, queueProperties); // creating a message object MQMessage queueMessage = new MQMessage(); queueMessage.WriteString(\"test message\"); //Define a Queue var queue = myQM.AccessQueue (strQueueName, MQC.MQOO_OUTPUT + MQC.MQOO_FAIL_IF_QUIESCING); MQPutMessageOptions queuePutMessageOptions = new MQPutMessageOptions(); queue.Put(queueMessage, queuePutMessageOptions); queue.Close(); Console.WriteLine(\"Success\"); } catch (Exception ex) { Console.WriteLine(ex); Console.WriteLine(ex.Message); } Console.ReadLine(); } } } Note: There are more samples provided with the MQ Client. Location: C:\\Program Files\\IBM\\MQ\\tools\\dotnet\\samples\\","title":"Sample code"},{"location":"mq/IBMCloud_MQ_dotNet_Core_Managed/#debugging-connectivity-issues","text":"On the Client Application I would highly recommend you turn on MQ Tracing for your windows client. IMPORTANT: This requires you to reference the IBM MQ Client DLL from the installed MQ Client on your local windows machine. You will need to set 3 environment variables for your application. Select the debug menu and then select debug properties to show this window below. Set the environment variables. NOTE: You need to close down Visual Studio and reopen it to get the variables to be picked up by the editor. On the MQ Server. You can see any connection errors in the logs on the server. Below is a screen shot of the logs.","title":"Debugging \u2013 Connectivity Issues.."},{"location":"mq/IBMCloud_MQ_dotNet_Core_Managed/#references","text":"Connecting to IBM MQ with SSL Article How to import intermediate and root certificates via MMC Troubleshooting MQ SSL Sample code repository Download \u2013 Sample instructions for SSL Python SSL Unmanaged .Net Framework Sample How To MQ Documentation \u2013 Configure TLS for Managed .NET App Cyper Spec for MQ Information Key Repository\u2019s for Managed .Net Applications Running .Net Core application on Linux How to perform common IBM Management Cert Tasks IBM MQ in Kubernetes \u2013 Enabling TLS with signed CA Generating PK12 Certs Creating self signed Certs for use with IBM MQ on Cloud Stack Overflow \u2013 2393 Error - Resolution Stack Overflow \u2013 MQ TLS Error Resolution with Tracing How to create a PEM file Documentation \u2013 Understanding the Certificate Label Requirements How to create a pfx file from cert and private key","title":"References"},{"location":"mq/IBMCloud_MQ_dotNet_Framework_Unmanaged/","text":"Enabling TLS for the unmanaged .NET Framework client Download Instructions This is an example to demonstrate the configuration and setup for the IBM MQ Queue Manager and the TLS security requirements to connect using a dotNet Freamework applciation. Note: The .NET frame work IBM MQ libraries allow you to connect to MQ using an unmanaged MQ Connection. This allows you to connect by using your own keystore file (kdb). Just note that the .NET Core libraries require you to use a managed connection (managed means you have to use the Windows Authority Keystore). Prerequisites IBM MQ Queue Manager in the IBM Cloud Windows Client MQ Dot Net Client Visual Studio Community Edition Download the TLS Certificate and connection information from your queue manager in the cloud Log into your IBM Cloud account and navigate to your \u201cIBM MQ Service\u201d. You can find your services in the resource list. Select the queue manager you wish to connect to. Select the Key store tab, to display the certificates associated with your queue manager. Download the certificate by selecting the 3 dots on the certificate and selecting the \u201cDownload public certificate\u201d button. Copy the downloaded PEM file to your project folder, where you will run the application from. Download the connection information for your queue manager by selecting the \u201cConnection Information\u201d button. You can choose the format to download. I selected plain text in my example. Inspect the connection information. We will need the information outlined in red for connection to our queue manager. * TASK COMPLETE * * * * * **** You now have all the information you need to connect to this queue manager Create application userid/apikey Look here for more detailed information on how to setup userid and api key. Instructions Our sample will use a pre-defined queue, so the authorization record has been automatically configured. See below instructions on how to configure authorization to a custom queue. Note: If you do not intend to use one of the predefined 'DEV.QUEUE.' queues to put and get messages, follow the Assigning user/group access to a queue guide to configure the authorization record required for this queue. Below are the steps that I took to create a userid / apikey. Below are the steps that I took to create a userid / apikey. 1.) On the main IBM MQ Service screen, select \u201cApplication Credentials\u201d 2.) Select the \u201cAdd\u201d button to create a NEW set of application credentials 3.) Fill out the information and select \u201cAdd and generate API Key\u201d IMPORTANT: You will ONLY see the API KEY ONE TIME!! Take note of this.. !! * TASK COMPLETE * * * * * **** This will be the Userid & Password used to authenticate to the queue manager. Create the keystore for the client connection For this next step, we need to create a keystore file and add our certificate information to the keystore. 1.) Copy the downloaded PEM file (containing the cert) to your project directory. This was downloaded from the IBM Cloud QM Service page in a previous step. 2.) Create the keystore with this command below. Note: This command line tool is part of the MQ Client Location is here on my machine: C:\\Program Files\\IBM\\MQ\\bin runmqakm -keydb -create -db <keystorename>.kdb -pw <password> -type pkcs12 -expire 1000 -stash keystorename - You can name your keystore any name you wish password - You can set the password for the keystore to anything you wish My Example <MQ Client Install>IBM/MQ/bin/runmqakm -keydb -create -db qmgrcert.kdb -pw password -type pkcs12 -expire 1000 -stash 3.) Add the PEM (certificate) to the keystore with this command below. runmqakm -cert -add -label <yourlabel> -db <keystorename>.kdb -stashed -trust enable -file <pemfilename>.pem yourlabel - You can add any label you like here, but I recommend using the same name as your keystorename keystorename - This must match the keystore name you created in the first command. pemfilename - This must match the name of your pem file (should be in the same directory where your running this command. My Example <MQ Client Install>IBM/MQ/bin/runmqakm -cert -add -label qmgrcert -db qmgrcert.kdb -stashed -trust enable -file qmgrcert.pem \u2003``` 4.) Verify that you have the generated kdb and sth files You should see two new files that were generated by these 2 commands above. * **keystorname**.kdb * **keystorename**.sth **TASK COMPLETE** We will use the keystore files to connect to the queue manager via a channel that is TLS enabled. ## Add MQ Client dll\u2019s to your project. Configure your .Net Framework Application to include these two dll\u2019s from the MQ Client bin folder. My location: ```C:\\Program Files\\IBM\\MQ\\bin``` <img src=\"../../images/dotNetFramework_MQ_TLS/11.png\" style=\"width: 60%; height: 60%\"> ## Sample .Net Framework Code You will need to modify the sample code to include your connection information and the location of your kdb keystore file. **Note:** ***You will need to omit the file extension (.kdb) for the keystore property.*** using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using IBM.WMQ; using System.Collections; using System.Runtime.Remoting.Messaging; namespace mqmgrtest { internal class Program { static void Main(string[] args) { string strQueueManagerName = \"myqmgr\"; string strChannelName = \"CLOUD.ADMIN.SVRCONN\"; string strQueueName = \"DEV.QUEUE.1\"; string strServerName = \"myqmgr-4e4a.qm.us-south.mq.appdomain.cloud\"; int intPort = 30762; string strMsg = \"Hello IBM, this is a message\"; Hashtable queueProperties = new Hashtable { { MQC.HOST_NAME_PROPERTY, strServerName }, { MQC.CHANNEL_PROPERTY, strChannelName }, { MQC.PORT_PROPERTY, intPort }, { MQC.SSL_CIPHER_SUITE_PROPERTY, \"TLS_RSA_WITH_AES_128_CBC_SHA256\" }, { MQC.SSL_CIPHER_SPEC_PROPERTY, \"TLS_RSA_WITH_AES_128_CBC_SHA256\" }, { MQC.USER_ID_PROPERTY, \"davetest\" }, { MQC.PASSWORD_PROPERTY, \"F-5QDP8lO_cI0j7521wEchXxzd2Yv7DeA_gPqa28ASBV\" }, { MQC.TRANSPORT_PROPERTY, MQC.TRANSPORT_MQSERIES_CLIENT }, { MQC.SSL_CERT_STORE_PROPERTY, \"C:/Users/Administrator/mq-dev-patterns-master/mq-dev-patterns-master/dotnet/keys/qmgrcert\" } }; //Define a Queue Manager try { MQQueueManager myQM = new MQQueueManager(strQueueManagerName, queueProperties); MQMessage queueMessage = new MQMessage(); //Define a Message (Option 1) queueMessage.Format = MQC.MQFMT_STRING; queueMessage.CharacterSet = Encoding.UTF8.CodePage; queueMessage.Write(Encoding.UTF8.GetBytes(strMsg)); //Define a Message (Option 2) //var message = new MQMessage(); //String messageString = \"test message\"; //queueMessage.WriteString(\"test message\"); //Define a Queue var queue = myQM.AccessQueue (strQueueName, MQC.MQOO_OUTPUT + MQC.MQOO_FAIL_IF_QUIESCING); MQPutMessageOptions queuePutMessageOptions = new MQPutMessageOptions(); queue.Put(queueMessage, queuePutMessageOptions); queue.Close(); Console.WriteLine(\"Success\"); } catch (Exception ex) { Console.WriteLine(ex); Console.WriteLine( ex.Message); } Console.ReadLine(); } } } ## Resources [](https://www.ibm.com/docs/en/ibm-mq/9.0?topic=client-enabling-tls-unmanaged-net) <img src=\"../../images/dotNetFramework_MQ_TLS/12.png\" style=\"width: 60%; height: 60%\"> [](https://www.ibm.com/docs/en/ibm-mq/9.3?topic=roadmap-mq-downloads) Where to download the MQ Client files <img src=\"../../images/dotNetFramework_MQ_TLS/13.png\" style=\"width: 60%; height: 60%\"> This one below is what I recommend you install. <img src=\"../../images/dotNetFramework_MQ_TLS/14.png\" style=\"width: 60%; height: 60%\"> ## Extra credit [](https://www.ibm.com/docs/en/ibm-mq/9.3?topic=multiplatforms-dead-letter-queue-handler-sample) [](https://www.ssls.com/knowledgebase/how-to-import-intermediate-and-root-certificates-via-mmc/) Converting PEM to PFX openssl pkcs12 -inkey bob_key.pem -in bob_cert.cert -export -out bob_pfx.pfx ``` OpenSSL Install on Windows","title":"IBM CLoud MQ - TLS dotNet Framework"},{"location":"mq/IBMCloud_MQ_dotNet_Framework_Unmanaged/#enabling-tls-for-the-unmanaged-net-framework-client","text":"Download Instructions This is an example to demonstrate the configuration and setup for the IBM MQ Queue Manager and the TLS security requirements to connect using a dotNet Freamework applciation. Note: The .NET frame work IBM MQ libraries allow you to connect to MQ using an unmanaged MQ Connection. This allows you to connect by using your own keystore file (kdb). Just note that the .NET Core libraries require you to use a managed connection (managed means you have to use the Windows Authority Keystore).","title":"Enabling TLS for the unmanaged .NET Framework client"},{"location":"mq/IBMCloud_MQ_dotNet_Framework_Unmanaged/#prerequisites","text":"IBM MQ Queue Manager in the IBM Cloud Windows Client MQ Dot Net Client Visual Studio Community Edition","title":"Prerequisites"},{"location":"mq/IBMCloud_MQ_dotNet_Framework_Unmanaged/#download-the-tls-certificate-and-connection-information-from-your-queue-manager-in-the-cloud","text":"Log into your IBM Cloud account and navigate to your \u201cIBM MQ Service\u201d. You can find your services in the resource list. Select the queue manager you wish to connect to. Select the Key store tab, to display the certificates associated with your queue manager. Download the certificate by selecting the 3 dots on the certificate and selecting the \u201cDownload public certificate\u201d button. Copy the downloaded PEM file to your project folder, where you will run the application from. Download the connection information for your queue manager by selecting the \u201cConnection Information\u201d button. You can choose the format to download. I selected plain text in my example. Inspect the connection information. We will need the information outlined in red for connection to our queue manager. * TASK COMPLETE * * * * * **** You now have all the information you need to connect to this queue manager","title":"Download the TLS Certificate and connection information from your queue manager in the cloud"},{"location":"mq/IBMCloud_MQ_dotNet_Framework_Unmanaged/#create-application-useridapikey","text":"Look here for more detailed information on how to setup userid and api key. Instructions Our sample will use a pre-defined queue, so the authorization record has been automatically configured. See below instructions on how to configure authorization to a custom queue. Note: If you do not intend to use one of the predefined 'DEV.QUEUE.' queues to put and get messages, follow the Assigning user/group access to a queue guide to configure the authorization record required for this queue. Below are the steps that I took to create a userid / apikey. Below are the steps that I took to create a userid / apikey. 1.) On the main IBM MQ Service screen, select \u201cApplication Credentials\u201d 2.) Select the \u201cAdd\u201d button to create a NEW set of application credentials 3.) Fill out the information and select \u201cAdd and generate API Key\u201d IMPORTANT: You will ONLY see the API KEY ONE TIME!! Take note of this.. !! * TASK COMPLETE * * * * * **** This will be the Userid & Password used to authenticate to the queue manager.","title":"Create application userid/apikey"},{"location":"mq/IBMCloud_MQ_dotNet_Framework_Unmanaged/#create-the-keystore-for-the-client-connection","text":"For this next step, we need to create a keystore file and add our certificate information to the keystore. 1.) Copy the downloaded PEM file (containing the cert) to your project directory. This was downloaded from the IBM Cloud QM Service page in a previous step. 2.) Create the keystore with this command below. Note: This command line tool is part of the MQ Client Location is here on my machine: C:\\Program Files\\IBM\\MQ\\bin runmqakm -keydb -create -db <keystorename>.kdb -pw <password> -type pkcs12 -expire 1000 -stash keystorename - You can name your keystore any name you wish password - You can set the password for the keystore to anything you wish My Example <MQ Client Install>IBM/MQ/bin/runmqakm -keydb -create -db qmgrcert.kdb -pw password -type pkcs12 -expire 1000 -stash 3.) Add the PEM (certificate) to the keystore with this command below. runmqakm -cert -add -label <yourlabel> -db <keystorename>.kdb -stashed -trust enable -file <pemfilename>.pem yourlabel - You can add any label you like here, but I recommend using the same name as your keystorename keystorename - This must match the keystore name you created in the first command. pemfilename - This must match the name of your pem file (should be in the same directory where your running this command. My Example <MQ Client Install>IBM/MQ/bin/runmqakm -cert -add -label qmgrcert -db qmgrcert.kdb -stashed -trust enable -file qmgrcert.pem \u2003``` 4.) Verify that you have the generated kdb and sth files You should see two new files that were generated by these 2 commands above. * **keystorname**.kdb * **keystorename**.sth **TASK COMPLETE** We will use the keystore files to connect to the queue manager via a channel that is TLS enabled. ## Add MQ Client dll\u2019s to your project. Configure your .Net Framework Application to include these two dll\u2019s from the MQ Client bin folder. My location: ```C:\\Program Files\\IBM\\MQ\\bin``` <img src=\"../../images/dotNetFramework_MQ_TLS/11.png\" style=\"width: 60%; height: 60%\"> ## Sample .Net Framework Code You will need to modify the sample code to include your connection information and the location of your kdb keystore file. **Note:** ***You will need to omit the file extension (.kdb) for the keystore property.*** using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using IBM.WMQ; using System.Collections; using System.Runtime.Remoting.Messaging; namespace mqmgrtest { internal class Program { static void Main(string[] args) { string strQueueManagerName = \"myqmgr\"; string strChannelName = \"CLOUD.ADMIN.SVRCONN\"; string strQueueName = \"DEV.QUEUE.1\"; string strServerName = \"myqmgr-4e4a.qm.us-south.mq.appdomain.cloud\"; int intPort = 30762; string strMsg = \"Hello IBM, this is a message\"; Hashtable queueProperties = new Hashtable { { MQC.HOST_NAME_PROPERTY, strServerName }, { MQC.CHANNEL_PROPERTY, strChannelName }, { MQC.PORT_PROPERTY, intPort }, { MQC.SSL_CIPHER_SUITE_PROPERTY, \"TLS_RSA_WITH_AES_128_CBC_SHA256\" }, { MQC.SSL_CIPHER_SPEC_PROPERTY, \"TLS_RSA_WITH_AES_128_CBC_SHA256\" }, { MQC.USER_ID_PROPERTY, \"davetest\" }, { MQC.PASSWORD_PROPERTY, \"F-5QDP8lO_cI0j7521wEchXxzd2Yv7DeA_gPqa28ASBV\" }, { MQC.TRANSPORT_PROPERTY, MQC.TRANSPORT_MQSERIES_CLIENT }, { MQC.SSL_CERT_STORE_PROPERTY, \"C:/Users/Administrator/mq-dev-patterns-master/mq-dev-patterns-master/dotnet/keys/qmgrcert\" } }; //Define a Queue Manager try { MQQueueManager myQM = new MQQueueManager(strQueueManagerName, queueProperties); MQMessage queueMessage = new MQMessage(); //Define a Message (Option 1) queueMessage.Format = MQC.MQFMT_STRING; queueMessage.CharacterSet = Encoding.UTF8.CodePage; queueMessage.Write(Encoding.UTF8.GetBytes(strMsg)); //Define a Message (Option 2) //var message = new MQMessage(); //String messageString = \"test message\"; //queueMessage.WriteString(\"test message\"); //Define a Queue var queue = myQM.AccessQueue (strQueueName, MQC.MQOO_OUTPUT + MQC.MQOO_FAIL_IF_QUIESCING); MQPutMessageOptions queuePutMessageOptions = new MQPutMessageOptions(); queue.Put(queueMessage, queuePutMessageOptions); queue.Close(); Console.WriteLine(\"Success\"); } catch (Exception ex) { Console.WriteLine(ex); Console.WriteLine( ex.Message); } Console.ReadLine(); } } } ## Resources [](https://www.ibm.com/docs/en/ibm-mq/9.0?topic=client-enabling-tls-unmanaged-net) <img src=\"../../images/dotNetFramework_MQ_TLS/12.png\" style=\"width: 60%; height: 60%\"> [](https://www.ibm.com/docs/en/ibm-mq/9.3?topic=roadmap-mq-downloads) Where to download the MQ Client files <img src=\"../../images/dotNetFramework_MQ_TLS/13.png\" style=\"width: 60%; height: 60%\"> This one below is what I recommend you install. <img src=\"../../images/dotNetFramework_MQ_TLS/14.png\" style=\"width: 60%; height: 60%\"> ## Extra credit [](https://www.ibm.com/docs/en/ibm-mq/9.3?topic=multiplatforms-dead-letter-queue-handler-sample) [](https://www.ssls.com/knowledgebase/how-to-import-intermediate-and-root-certificates-via-mmc/) Converting PEM to PFX openssl pkcs12 -inkey bob_key.pem -in bob_cert.cert -export -out bob_pfx.pfx ``` OpenSSL Install on Windows","title":"Create the keystore for the client connection"},{"location":"mq/MQ-RDQM-Install/","text":"Deploying MQ RDQM with Floating IP Address on VSphere Download Instructions This is the instructions for deploying RDQM and configuring a HA Queue Manager with floating ip address. Requirements Platform: VSphere 6.7 3 Virtual Machines VM OS: RHEL 9.2 Need a second disk 100 GB on all 3 VM\u2019s 2 CPU x 16GB of Mem Public IP Address Software: IBM MQ 9.3.0.2 Download the software from IBM\u2019s Internal DSW Downloads Site Software XL Sites of Interest https://www.ibm.com/docs/en/ibm-mq/9.3?topic=configurations-rdqm-high-availability https://www.royalcyber.com/blog/middleware/high-availability-of-replicated-data-queue-manager/ Preparing for RDQM https://www.ibm.com/docs/en/ibm-mq/9.3?topic=configurations-rdqm-high-availability https://community.ibm.com/community/user/integration/blogs/prema-laxmanachar1/2022/08/10/detailed-procedure-of-migrating-regular-ibm-mq-que https://www.ibm.com/docs/en/ibm-mq/9.3?topic=availability-requirements-rdqm-ha-solution https://www.redhat.com/sysadmin/create-physical-volume General Commands that were of use during my attempts to install yum upgrade yum update yum update kernel hostnamectl <-- Verify Kernel version matches on all 3 machines. Installing RDQM Documentation 1. Provision 3 (2CPU x 16GB mem) machines in VSphere Uncheck the \"SECURE BOOT\" option for all 3 VM's Minimum requirements are 2CPU x 16GB of Mem Add an extra 100GB disk 2. Install packages (on all 3 boxes) sudo yum -y install libxslt net-snmp-libs nfs-utils nfs-utils-coreos perl-TimeDate python3-lxml python-unversioned-command 3. SCP the install file (to all three servers) scp <file>@<ipaddress of target>:<location on target to place file> EXAMPLE: scp ./IBM_MQ_9.3.0.2_LINUX_X86-64.tar.gz bastion@10.67.42.177:/home/bastion/ 4. Untar the file (on all 3 servers) tar -xvf IBM_MQ_9.3.0.2_LINUX_X86-64.tar.gz 5. Install kernal NOTE: I ran into issues when trying to use the drbd kernel that is provided with the IBM MQ 9.3.0.2 download. I had to download a NEWER one because the RHEL OS was at a higher version than what was expected. Look on this page for a download for RHEL 9.2 Kernal to match the OS Interim kernel module releases https://www.ibm.com/support/pages/ibm-mq-replicated-data-queue-manager-kernel-modules#LTS9_2 https://www.ibm.com/support/fixcentral/swg/downloadFixes?parent=ibm%2FWebSphere&product=ibm/WebSphere/WebSphere+MQ&release=All&platform=All&function=fixId&fixids=9-IBM-MQ-LAIT43724-kmod-drbd-9.1.14&includeRequisites=1&includeSupersedes=0&downloadMethod=http&source=SAR THIS IS THE FILE I USED: interim fix: 9-IBM-MQ-LAIT43724-kmod-drbd-9.1.14 Steps to install (On all 3 machines) wget https://ak-delivery04-mul.dhe.ibm.com/sdfdl/v2/sar/CM/WS/0bfrk/0/Xa.2/Xb.jusyLTSp44S03o2r0ALI9rdnHzZDQ4Pdhenqod7cCfzE79MnOWh_uumEiKA/Xc.CM/WS/0bfrk/0/9-IBM-MQ-LAIT43724-kmod-drbd-9.1.14.tgz/Xd./Xf.LPR.D1VK/Xg.12320491/Xi.habanero/XY.habanero/XZ.toSiALXjCZMNaORuZis7fBS2qXvKsM_3/9-IBM-MQ-LAIT43724-kmod-drbd-9.1.14.tgz tar -xvf 9-IBM-MQ-LAIT43724-kmod-drbd-9.1.14.tgz cd 9-IBM-MQ-LAIT43724-kmod-drbd-9.1.14 yum install ./yum install ./kmod-drbd-9.1.14+ptf.2_5.14.0_284.11.1-1.x86_64.rpm 6. Install DRBD Utils yum install /home/bastion/MQServer/Advanced/RDQM/PreReqs/el9/drbd-utils-9/* 7. Install Pacemaker yum install /home/bastion/MQServer/Advanced/RDQM/PreReqs/el9/pacemaker-2/* 8. Accept the license /home/bastion/MQServer/mqlicense.sh 9. Install MQ cd /home/bastion/MQServer yum install MQSeriesGSKit* MQSeriesServer* MQSeriesRuntime* 10. Install RDQM cd /home/bastion/MQServer yum install Advanced/RDQM/MQSeriesRDQM* Preparing VM\u2019s for setup of RDQM Useful Commands: pvscan pvs pvcreate pvdisplay cfdisk lvmdiskscan Setup the disk volume group for DRBD Do this on all 3 VM\u2019s Find the disk device.. In my case it was /dev/sbd ls /dev/sd* Create the PV pvcreate /dev/sdb Create the Volume Group vgcreate drbdpool /dev/sdb Setup Passwordless SSH Login on all 3 VM\u2019s https://www.ibm.com/docs/en/ibm-mq/9.2?topic=solution-setting-up-passwordless-ssh usermod -d /home/mqm mqm mkhomedir_helper mqm Set the password passwd mqm su mqm ssh-keygen -t rsa -f /home/mqm/.ssh/id_rsa -N '' Copy Keys to all 3 VM's ssh-copy-id -i /home/mqm/.ssh/id_rsa.pub <ip address VM1> ssh-copy-id -i /home/mqm/.ssh/id_rsa.pub <ip address VM2> ssh-copy-id -i /home/mqm/.ssh/id_rsa.pub <ip address VM3> verify.. On each VM you can access without password ssh <ip address VM1>uname -n ssh <ip address VM2>uname -n ssh <ip address VM3>uname -n NOTE : You may be prompted for fingerprint the first time, so you NEED to TEST. Do on all machines Exit out of mqm user exit Switch to root user su passwd -d mqm passwd -l mqm Add mqm user to sudo file Run this command on all three servers and make the following edits. visudo ADD THE FOLLLOWING LINE BELOW THIS COMMENT ## Allows people in group wheel to run all commands #%mqm ALL=(ALL) ALL ADD THE FOLLLOWING LINE BELOW THIS COMMENT ## Same thing without a password %mqm ALL=(ALL) NOPASSWD: ALL Configure SELINUX Security NOTE : Run these commands on all machines as ROOT semanage permissive -a drbd_t /opt/mqm/samp/rdqm/firewalld/configure.sh Setup local dns NOTE : Run these commands on all machines as ROOT vi /etc/hosts ADD THIS TO THE FILE <ip address VM1> qm1 <ip address VM2> qm2 <ip address VM3> qm3 Configure RDMQ INI File NOTE : Run these commands on all machines as ROOT vi /var/mqm/rdqm.ini EDIT FILE LIKE THIS Node: Name=qm1 HA_Replication=10.67.42.177 HA_Primary=10.67.42.177 # HA_Alternate= # DR_Replication=10.67.42.177 Node: Name=qm2 HA_Replication=10.67.42.155 HA_Primary=10.67.42.155 # HA_Alternate= # DR_Replication=10.67.42.155 Node: Name=qm3 HA_Replication=10.67.42.153 HA_Primary=10.67.42.153 # HA_Alternate= # DR_Replication=10.67.42.153 Configure Pacemaker group /opt/mqm/bin/rdqmadm -c Configure NEW RDQM QueueManager /opt/mqm/bin/crtmqm -sx qmgrdk3 /opt/mqm/bin/crtmqm -sxs -fs 3072M qmgrdk1 Disable Secure boot https://access.redhat.com/solutions/6955734 /usr/bin/mokutil --disable-validation NOTE: Take note of the password you set shutdown -h now Modify the settings on the VM in VSphere Uncheck the secure boot check box in the boot options. Validate that is't not on. /usr/bin/mokutil --sb-state Configure Floating IP Address https://www.ibm.com/docs/en/ibm-mq/9.3?topic=availability-creating-deleting-floating-ip-address NOTE: You will need to to have the network card id. You can find that by issuing the following command. ifconfig /opt/mqm/bin/rdqmint -m qmgrdk3 -a -f <Floating IP Address> -l ens192","title":"RDQM HA Install"},{"location":"mq/MQ-RDQM-Install/#deploying-mq-rdqm-with-floating-ip-address-on-vsphere","text":"Download Instructions This is the instructions for deploying RDQM and configuring a HA Queue Manager with floating ip address.","title":"Deploying MQ RDQM with Floating IP Address on VSphere"},{"location":"mq/MQ-RDQM-Install/#requirements","text":"Platform: VSphere 6.7 3 Virtual Machines VM OS: RHEL 9.2 Need a second disk 100 GB on all 3 VM\u2019s 2 CPU x 16GB of Mem Public IP Address Software: IBM MQ 9.3.0.2 Download the software from IBM\u2019s Internal DSW Downloads Site Software XL","title":"Requirements"},{"location":"mq/MQ-RDQM-Install/#sites-of-interest","text":"https://www.ibm.com/docs/en/ibm-mq/9.3?topic=configurations-rdqm-high-availability https://www.royalcyber.com/blog/middleware/high-availability-of-replicated-data-queue-manager/ Preparing for RDQM https://www.ibm.com/docs/en/ibm-mq/9.3?topic=configurations-rdqm-high-availability https://community.ibm.com/community/user/integration/blogs/prema-laxmanachar1/2022/08/10/detailed-procedure-of-migrating-regular-ibm-mq-que https://www.ibm.com/docs/en/ibm-mq/9.3?topic=availability-requirements-rdqm-ha-solution https://www.redhat.com/sysadmin/create-physical-volume","title":"Sites of Interest"},{"location":"mq/MQ-RDQM-Install/#general-commands-that-were-of-use-during-my-attempts-to-install","text":"yum upgrade yum update yum update kernel hostnamectl <-- Verify Kernel version matches on all 3 machines.","title":"General Commands that were of use during my attempts to install"},{"location":"mq/MQ-RDQM-Install/#installing-rdqm","text":"Documentation 1. Provision 3 (2CPU x 16GB mem) machines in VSphere Uncheck the \"SECURE BOOT\" option for all 3 VM's Minimum requirements are 2CPU x 16GB of Mem Add an extra 100GB disk 2. Install packages (on all 3 boxes) sudo yum -y install libxslt net-snmp-libs nfs-utils nfs-utils-coreos perl-TimeDate python3-lxml python-unversioned-command 3. SCP the install file (to all three servers) scp <file>@<ipaddress of target>:<location on target to place file> EXAMPLE: scp ./IBM_MQ_9.3.0.2_LINUX_X86-64.tar.gz bastion@10.67.42.177:/home/bastion/ 4. Untar the file (on all 3 servers) tar -xvf IBM_MQ_9.3.0.2_LINUX_X86-64.tar.gz 5. Install kernal NOTE: I ran into issues when trying to use the drbd kernel that is provided with the IBM MQ 9.3.0.2 download. I had to download a NEWER one because the RHEL OS was at a higher version than what was expected. Look on this page for a download for RHEL 9.2 Kernal to match the OS Interim kernel module releases https://www.ibm.com/support/pages/ibm-mq-replicated-data-queue-manager-kernel-modules#LTS9_2 https://www.ibm.com/support/fixcentral/swg/downloadFixes?parent=ibm%2FWebSphere&product=ibm/WebSphere/WebSphere+MQ&release=All&platform=All&function=fixId&fixids=9-IBM-MQ-LAIT43724-kmod-drbd-9.1.14&includeRequisites=1&includeSupersedes=0&downloadMethod=http&source=SAR THIS IS THE FILE I USED: interim fix: 9-IBM-MQ-LAIT43724-kmod-drbd-9.1.14 Steps to install (On all 3 machines) wget https://ak-delivery04-mul.dhe.ibm.com/sdfdl/v2/sar/CM/WS/0bfrk/0/Xa.2/Xb.jusyLTSp44S03o2r0ALI9rdnHzZDQ4Pdhenqod7cCfzE79MnOWh_uumEiKA/Xc.CM/WS/0bfrk/0/9-IBM-MQ-LAIT43724-kmod-drbd-9.1.14.tgz/Xd./Xf.LPR.D1VK/Xg.12320491/Xi.habanero/XY.habanero/XZ.toSiALXjCZMNaORuZis7fBS2qXvKsM_3/9-IBM-MQ-LAIT43724-kmod-drbd-9.1.14.tgz tar -xvf 9-IBM-MQ-LAIT43724-kmod-drbd-9.1.14.tgz cd 9-IBM-MQ-LAIT43724-kmod-drbd-9.1.14 yum install ./yum install ./kmod-drbd-9.1.14+ptf.2_5.14.0_284.11.1-1.x86_64.rpm 6. Install DRBD Utils yum install /home/bastion/MQServer/Advanced/RDQM/PreReqs/el9/drbd-utils-9/* 7. Install Pacemaker yum install /home/bastion/MQServer/Advanced/RDQM/PreReqs/el9/pacemaker-2/* 8. Accept the license /home/bastion/MQServer/mqlicense.sh 9. Install MQ cd /home/bastion/MQServer yum install MQSeriesGSKit* MQSeriesServer* MQSeriesRuntime* 10. Install RDQM cd /home/bastion/MQServer yum install Advanced/RDQM/MQSeriesRDQM*","title":"Installing RDQM"},{"location":"mq/MQ-RDQM-Install/#preparing-vms-for-setup-of-rdqm","text":"Useful Commands: pvscan pvs pvcreate pvdisplay cfdisk lvmdiskscan Setup the disk volume group for DRBD Do this on all 3 VM\u2019s Find the disk device.. In my case it was /dev/sbd ls /dev/sd* Create the PV pvcreate /dev/sdb Create the Volume Group vgcreate drbdpool /dev/sdb","title":"Preparing VM\u2019s for setup of RDQM"},{"location":"mq/MQ-RDQM-Install/#setup-passwordless-ssh-login-on-all-3-vms","text":"https://www.ibm.com/docs/en/ibm-mq/9.2?topic=solution-setting-up-passwordless-ssh usermod -d /home/mqm mqm mkhomedir_helper mqm Set the password passwd mqm su mqm ssh-keygen -t rsa -f /home/mqm/.ssh/id_rsa -N '' Copy Keys to all 3 VM's ssh-copy-id -i /home/mqm/.ssh/id_rsa.pub <ip address VM1> ssh-copy-id -i /home/mqm/.ssh/id_rsa.pub <ip address VM2> ssh-copy-id -i /home/mqm/.ssh/id_rsa.pub <ip address VM3> verify.. On each VM you can access without password ssh <ip address VM1>uname -n ssh <ip address VM2>uname -n ssh <ip address VM3>uname -n NOTE : You may be prompted for fingerprint the first time, so you NEED to TEST. Do on all machines Exit out of mqm user exit Switch to root user su passwd -d mqm passwd -l mqm","title":"Setup Passwordless SSH Login on all 3 VM\u2019s"},{"location":"mq/MQ-RDQM-Install/#add-mqm-user-to-sudo-file","text":"Run this command on all three servers and make the following edits. visudo ADD THE FOLLLOWING LINE BELOW THIS COMMENT ## Allows people in group wheel to run all commands #%mqm ALL=(ALL) ALL ADD THE FOLLLOWING LINE BELOW THIS COMMENT ## Same thing without a password %mqm ALL=(ALL) NOPASSWD: ALL","title":"Add mqm user to sudo file"},{"location":"mq/MQ-RDQM-Install/#configure-selinux-security","text":"NOTE : Run these commands on all machines as ROOT semanage permissive -a drbd_t /opt/mqm/samp/rdqm/firewalld/configure.sh","title":"Configure SELINUX Security"},{"location":"mq/MQ-RDQM-Install/#setup-local-dns","text":"NOTE : Run these commands on all machines as ROOT vi /etc/hosts ADD THIS TO THE FILE <ip address VM1> qm1 <ip address VM2> qm2 <ip address VM3> qm3","title":"Setup local dns"},{"location":"mq/MQ-RDQM-Install/#configure-rdmq-ini-file","text":"NOTE : Run these commands on all machines as ROOT vi /var/mqm/rdqm.ini EDIT FILE LIKE THIS Node: Name=qm1 HA_Replication=10.67.42.177 HA_Primary=10.67.42.177 # HA_Alternate= # DR_Replication=10.67.42.177 Node: Name=qm2 HA_Replication=10.67.42.155 HA_Primary=10.67.42.155 # HA_Alternate= # DR_Replication=10.67.42.155 Node: Name=qm3 HA_Replication=10.67.42.153 HA_Primary=10.67.42.153 # HA_Alternate= # DR_Replication=10.67.42.153","title":"Configure RDMQ INI File"},{"location":"mq/MQ-RDQM-Install/#configure-pacemaker-group","text":"/opt/mqm/bin/rdqmadm -c","title":"Configure Pacemaker group"},{"location":"mq/MQ-RDQM-Install/#configure-new-rdqm-queuemanager","text":"/opt/mqm/bin/crtmqm -sx qmgrdk3 /opt/mqm/bin/crtmqm -sxs -fs 3072M qmgrdk1","title":"Configure NEW RDQM QueueManager"},{"location":"mq/MQ-RDQM-Install/#disable-secure-boot","text":"https://access.redhat.com/solutions/6955734 /usr/bin/mokutil --disable-validation NOTE: Take note of the password you set shutdown -h now Modify the settings on the VM in VSphere Uncheck the secure boot check box in the boot options. Validate that is't not on. /usr/bin/mokutil --sb-state","title":"Disable Secure boot"},{"location":"mq/MQ-RDQM-Install/#configure-floating-ip-address","text":"https://www.ibm.com/docs/en/ibm-mq/9.3?topic=availability-creating-deleting-floating-ip-address NOTE: You will need to to have the network card id. You can find that by issuing the following command. ifconfig /opt/mqm/bin/rdqmint -m qmgrdk3 -a -f <Floating IP Address> -l ens192","title":"Configure Floating IP Address"},{"location":"openshift/skills-needed/","text":"Skills Needed to install OpenShift Downlaod the document here Download Document","title":"Skills Needed for Install"},{"location":"openshift/skills-needed/#skills-needed-to-install-openshift","text":"Downlaod the document here Download Document","title":"Skills Needed to install OpenShift"}]}